// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM4K.hdl

/**
 * Memory of 4K registers, each 16-bit wide.  
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = RAM4K[address(t)](t)
 *     Write: If load(t-1) then RAM4K[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load == 1, the in value is loaded 
 * into the memory location specified by address.  This value becomes 
 * available through the out output starting from the next time step.
 */

CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
    // Put your code here.
	DMux8Way(in=load, a=l0, b=l1, c=l2, d=l3, e=l4, f=l5, g=l6, h=l7, sel=address[9..11]);
	RAM512(in=in, load=l0, address=address[0..8], out=RAM0);
	RAM512(in=in, load=l1, address=address[0..8], out=RAM1);
	RAM512(in=in, load=l2, address=address[0..8], out=RAM2);
	RAM512(in=in, load=l3, address=address[0..8], out=RAM3);
	RAM512(in=in, load=l4, address=address[0..8], out=RAM4);
	RAM512(in=in, load=l5, address=address[0..8], out=RAM5);
	RAM512(in=in, load=l6, address=address[0..8], out=RAM6);
	RAM512(in=in, load=l7, address=address[0..8], out=RAM7);
	Mux8Way16(a=RAM0, b=RAM1, c=RAM2, d=RAM3, e=RAM4, f=RAM5, g=RAM6, h=RAM7, sel=address[9..11], out=out);
}
