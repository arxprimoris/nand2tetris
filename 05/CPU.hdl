// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        inst[16],		 // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

    PARTS:
	Not(in=inst[15], out=acBitN);						// Invert A/C instruction bit
	Mux16(sel=acBitN, a=aluOut, b=inst, out=aOut0);		// Check for A/C instruction bit
	Or(a=acBitN, b=inst[5], out=aLoad);					// ...and check for A as a destination
	ARegister(load=aLoad, in=aOut0, out=aOut, out[0..14]=addressM);	// A register	
	And(a=inst[4], b=inst[15], out=dLoad);				// Check for C inst and D dest
	DRegister(load=dLoad, in=aluOut, out=dOut);			// D register
	And(a=inst[15], b=inst[12], out=loadM);				// Check for using inM as input
	Mux16(sel=loadM, a=aOut, b=inM, out=amOut);			// Select either A or M
	And(a=inst[15], b=inst[3], out=writeM);				// Check for C inst and M dest
	
	Not(in=zrOut, out=notZero);							// ALU output not zero
	Not(in=ngOut, out=notNeg);							// ALU output not negative
	And(a=notZero, b=notNeg, out=greater);				// ALU output greater than zero
	Or(a=zrOut, b=ngOut, out=lessOrEqual);				// ALU output negative or zero
	And(a=inst[1], b=zrOut, out=jeq);					// Test for jump if equal
	And(a=inst[2], b=ngOut, out=jlt);					// Test for jump if less than
	And(a=inst[0], b=greater, out=jgt);					// Test for jump if greater than
	Or(a=jgt, b=jeq, out=jge);							// Test for jump if less than or equal
	Or(a=jlt, b=jgt, out=jne);							// Test for jump if not equal	
	Or(a=jge, b=jne, out=jump);							// Test for ANY jump condition	
	And(a=inst[15], b=jump, out=loadPC);				// Test for jump AND C instruction

	PC(load=loadPC, inc=true, reset=reset, in=aOut, out[0..14]=pc);	// Program Counter
	ALU(x=dOut, y=amOut, zx=inst[11], nx=inst[10], zy=inst[9], ny=inst[8], f=inst[7], no=inst[6], out=aluOut, out=outM, zr=zrOut, ng=ngOut);
}
